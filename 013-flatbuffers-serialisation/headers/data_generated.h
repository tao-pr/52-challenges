// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATA_DATA_H_
#define FLATBUFFERS_GENERATED_DATA_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Data {

struct Route;
struct RouteBuilder;

struct Station;
struct StationBuilder;

enum Status {
  Status_Operating = 0,
  Status_Suspended = 1,
  Status_MIN = Status_Operating,
  Status_MAX = Status_Suspended
};

inline const Status (&EnumValuesStatus())[2] {
  static const Status values[] = {
    Status_Operating,
    Status_Suspended
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[3] = {
    "Operating",
    "Suspended",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (flatbuffers::IsOutRange(e, Status_Operating, Status_Suspended)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

struct Route FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RouteBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATIONS = 4,
    VT_STATUS = 6,
    VT_OPERATOR_ = 8,
    VT_NUMPERDAY = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *stations() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STATIONS);
  }
  Data::Status status() const {
    return static_cast<Data::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  const flatbuffers::String *operator_() const {
    return GetPointer<const flatbuffers::String *>(VT_OPERATOR_);
  }
  int16_t numPerDay() const {
    return GetField<int16_t>(VT_NUMPERDAY, 1);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATIONS) &&
           verifier.VerifyVector(stations()) &&
           verifier.VerifyVectorOfStrings(stations()) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_OPERATOR_) &&
           verifier.VerifyString(operator_()) &&
           VerifyField<int16_t>(verifier, VT_NUMPERDAY) &&
           verifier.EndTable();
  }
};

struct RouteBuilder {
  typedef Route Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_stations(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stations) {
    fbb_.AddOffset(Route::VT_STATIONS, stations);
  }
  void add_status(Data::Status status) {
    fbb_.AddElement<int8_t>(Route::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_operator_(flatbuffers::Offset<flatbuffers::String> operator_) {
    fbb_.AddOffset(Route::VT_OPERATOR_, operator_);
  }
  void add_numPerDay(int16_t numPerDay) {
    fbb_.AddElement<int16_t>(Route::VT_NUMPERDAY, numPerDay, 1);
  }
  explicit RouteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Route> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Route>(end);
    return o;
  }
};

inline flatbuffers::Offset<Route> CreateRoute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stations = 0,
    Data::Status status = Data::Status_Operating,
    flatbuffers::Offset<flatbuffers::String> operator_ = 0,
    int16_t numPerDay = 1) {
  RouteBuilder builder_(_fbb);
  builder_.add_operator_(operator_);
  builder_.add_stations(stations);
  builder_.add_numPerDay(numPerDay);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Route> CreateRouteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *stations = nullptr,
    Data::Status status = Data::Status_Operating,
    const char *operator_ = nullptr,
    int16_t numPerDay = 1) {
  auto stations__ = stations ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*stations) : 0;
  auto operator___ = operator_ ? _fbb.CreateString(operator_) : 0;
  return Data::CreateRoute(
      _fbb,
      stations__,
      status,
      operator___,
      numPerDay);
}

struct Station FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_ROUTES = 6,
    VT_CAPACITY = 8
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Data::Route>> *routes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Data::Route>> *>(VT_ROUTES);
  }
  int16_t capacity() const {
    return GetField<int16_t>(VT_CAPACITY, 100);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_ROUTES) &&
           verifier.VerifyVector(routes()) &&
           verifier.VerifyVectorOfTables(routes()) &&
           VerifyField<int16_t>(verifier, VT_CAPACITY) &&
           verifier.EndTable();
  }
};

struct StationBuilder {
  typedef Station Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(Station::VT_TITLE, title);
  }
  void add_routes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::Route>>> routes) {
    fbb_.AddOffset(Station::VT_ROUTES, routes);
  }
  void add_capacity(int16_t capacity) {
    fbb_.AddElement<int16_t>(Station::VT_CAPACITY, capacity, 100);
  }
  explicit StationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Station> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Station>(end);
    return o;
  }
};

inline flatbuffers::Offset<Station> CreateStation(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::Route>>> routes = 0,
    int16_t capacity = 100) {
  StationBuilder builder_(_fbb);
  builder_.add_routes(routes);
  builder_.add_title(title);
  builder_.add_capacity(capacity);
  return builder_.Finish();
}

inline flatbuffers::Offset<Station> CreateStationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const std::vector<flatbuffers::Offset<Data::Route>> *routes = nullptr,
    int16_t capacity = 100) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto routes__ = routes ? _fbb.CreateVector<flatbuffers::Offset<Data::Route>>(*routes) : 0;
  return Data::CreateStation(
      _fbb,
      title__,
      routes__,
      capacity);
}

inline const Data::Station *GetStation(const void *buf) {
  return flatbuffers::GetRoot<Data::Station>(buf);
}

inline const Data::Station *GetSizePrefixedStation(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Data::Station>(buf);
}

inline bool VerifyStationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Data::Station>(nullptr);
}

inline bool VerifySizePrefixedStationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Data::Station>(nullptr);
}

inline void FinishStationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::Station> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::Station> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_DATA_DATA_H_
